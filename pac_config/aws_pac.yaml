ConnectionName: aws_remote_pentest_connector
RiskLevel: safe
Compliance:
- CIS
- CSA-CCM
- HIPAA
- ISO 27001
ApplicationType: APIScan
Schedule: onetime
Target: http://prancersampleapp01.eastus2.cloudapp.azure.com:8888
# You can use postman collection as code for running attack inside the prancer.
# Connector defines the name of the git connector available in the collection.
# Postman remote files should include a path which has postman collection file and
# for postman env remote files, if you have environment variable file you can put
# the path inside the postmanEnvRemote file so prancer will go and extract the env
# variables and their values and merged it with postman collection.
APIScan:
  Type: OpenAPI
  DirectionProvider: link
  Direction: http://prancersampleapp01.eastus2.cloudapp.azure.com:8888/v2/swagger.json
  PostmanRemoteFile: ""
  PostmanEnvRemoteFile: ""
  Connector: ""
Scanner:
  Cloud:
    Platform:
      AWS:
        AfterRun: delete
        ExistingFargate:
          AccountId: "155603667260"
          TaskDefinition: pentest-task
          ClusterName: pentest-cluster
          Region: us-east-2
          SecurityGroup: pentest-security-group
          ContainerName: prancer-scanner
          SubnetId: subnet-08f3d9c081ac0370d
AuthenticationMethod: noAuthentication
AddOns:
- accessControl
- ascanrulesBeta
- sqliplugin
- directorylistv2_3
- portscan
- pscanrulesBeta
- websocket
- fuzzdb
- fuzzdboffensive
- fuzz
- graphql
- openapi
- jwt
